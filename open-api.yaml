openapi: 3.0.1
info:
  title: Bookshelf API
  description: |
    This is CRUD operation simple application which written for review
  version: 1.0.0
servers:
  - url: 'https://localhost:9898'
tags:
  - name: Book
    description: Book CRUD operations
paths:
  /book:
    post:
      operationId: createBook
      summary: createBook - Create a book
      description: Customer uses this endpoint to create a book
      tags:
        - Book
      requestBody:
        description: Book creation request prototype
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BookCreationPrototype'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookPrototype'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    get:
      operationId: searchBooks
      summary: searchBooks - Search in books or get whole of them
      description: >-
        Customer uses this endpoint to search in book. all of books is returns
        if name parameter does not send
      tags:
        - Book
      parameters:
        - $ref: '#/components/parameters/name'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Page'
                  - type: object
                    properties:
                      content:
                        type: array
                        items:
                          $ref: '#/components/schemas/BookPrototype'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      operationId: deleteBooks
      summary: deleteBooks - delete all books
      description: Customer uses this endpoint to delete all books
      tags:
        - Book
      responses:
        '202':
          description: DELETED
        '204':
          $ref: '#/components/responses/NotFound'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/book/{id}':
    get:
      operationId: getBook
      summary: getBook - Get specified book information
      description: Customer uses this endpoint to get specified book information
      tags:
        - Book
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookPrototype'
        '204':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      operationId: editBook
      summary: editBook - Edit specified book information
      description: Customer uses this endpoint to edit specified book information
      tags:
        - Book
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        description: Book creation request prototype
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BaseBookPrototype'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookPrototype'
        '204':
          $ref: '#/components/responses/NotFound'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      operationId: deleteBook
      summary: deleteBook - delete specified book
      description: Customer uses this endpoint to delete all books
      tags:
        - Book
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '202':
          description: DELETED
        '204':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    BaseBookPrototype:
      properties:
        name:
          type: string
        isbn:
          type: string
        price:
          type: integer
    BookCreationPrototype:
      allOf:
        - $ref: '#/components/schemas/BaseBookPrototype'
      properties:
        publisher:
          type: integer
        categories:
          type: array
          items:
            type: number
        contributes:
          type: array
          items:
            $ref: '#/components/schemas/AuthorContribute'
    AuthorContribute:
      properties:
        author:
          type: integer
        contribute:
          type: string
          enum:
            - AUTHOR
            - INTERCEPTOR
    BookPrototype:
      allOf:
        - $ref: '#/components/schemas/BaseBookPrototype'
      properties:
        publisher:
          type: integer
        categories:
          type: array
          items:
            type: number
        contributes:
          type: array
          items:
            $ref: '#/components/schemas/AuthorContribute'
    Page:
      properties:
        content:
          type: array
        last:
          type: boolean
        totalElements:
          type: number
        totalPages:
          type: number
        first:
          type: boolean
        numberOfElements:
          type: number
        size:
          type: number
        number:
          type: number
    Error:
      properties:
        code:
          type: string
        message:
          type: string
        timestamp:
          type: string
  parameters:
    id:
      in: path
      name: id
      description: unique id
      schema:
        type: number
        example: 1
      required: true
    name:
      in: query
      name: name
      description: query which used to seach
      schema:
        type: string
      required: false
  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalServerError:
      description: >-
        There is problem in processing request. This problem can be permanent,
        transient or unknown. You should call operator if got unknown or
        permanent error But in case of transient error you can repeat this
        request. You can determine error type in value of code in response
        prototype
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadRequestError:
      description: There is problem in request body.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
